    Spring-Data数据查询方法的返回通常的是Repository管理的聚合根的一个或多个实例。但是，有时候我们只需要返回某些特定的属性，不需要全部返回，
或者只返回一些复合型的字段。Spring-Data允许我们对特定的返回类型建模，以便更有选择的检索托管聚合的部分视图。

基于接口的投影，接口中的get方法，和实体中的属性一致。
    查询执行引擎在运行时为返回的每个元素创建该接口的代理实例，并将调用转发到目标对象的公开方法。
    投影可以递归使用。例如还希望包含一些地址信息，请为此创建一个投影接口，并从getAddress()的声明中返回该接口。
    在方法调用时，获取目标实例的address属性，并依次将其包装到投影代理中。

    ①闭合投影 Closed Projections：一个投影接口，其get方法都与实体类的属性相同，被认为是一个闭合投影。如果使用闭合投影
Spring-Data可以优化查询执行，因为我们知道支持投影代理所需要的所有属性。

    ②开放投影 Open Projections：投影接口中的get方法也可以使用@Value注释计算新值。
    target变量中提供了支持投影的实体。使用@Value的投影接口是一个开放的投影。在这种情况下，Spring-Data不能进行查询优化，因为
spel表达式可以使用实体的任何属性。
    @Value中使用的表达式不要太复杂，要避免字符串变量编程。对于非常简单的表达式，可以选择使用java8中引入的接口默认方法。
    这种方式要求能够完全基于投影接口上公开的其他get方法来实现逻辑。更灵活的方法是选择在Spring Bean中实现自定义逻辑，然后
    从spel表达式中调用该自定义逻辑。
    注意spel表达式如何引用myAdminBean和调用getFullAddress(...)方法，以及将投影代理作为方法参数。
    spel也可以使用方法中的参数值。方法参数可通过名为args的Object数组中获得。
    对于复杂的方式还是应该使用spring bean的形式


基于类的投影DTO
    定义投影的另一种方是使用值类型DTO（数据传输对象），该DTO持有需要检索的属性。DTO投影的使用方式与接口投影完全相同，
    只是不会发生代理，也不能用嵌套投影。

    如果要限制加载的字段来优化查询执行，则要加载的字段由公开的构造方法的参数名确定。
    使用lombok的@Value注解来简化DTO编写。



动态投影
    到目前为止，我们使用的投影类型作为集合的返回类型或元素类型。如果我们想要在调用时才确定投影的类型呢，这也是可以的。


Projections的应用场景有很多，我们应该多使用投影去让我们写出可读性更高的代码，而不是使用Object[],Map等。














